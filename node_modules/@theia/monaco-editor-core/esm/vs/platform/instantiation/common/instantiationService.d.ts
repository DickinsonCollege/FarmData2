import { SyncDescriptor } from './descriptors';
import { IInstantiationService, ServiceIdentifier, ServicesAccessor } from './instantiation';
import { ServiceCollection } from './serviceCollection';
export declare class InstantiationService implements IInstantiationService {
    readonly _serviceBrand: undefined;
    private readonly _services;
    private readonly _strict;
    private readonly _parent?;
    constructor(services?: ServiceCollection, strict?: boolean, parent?: InstantiationService);
    createChild(services: ServiceCollection): IInstantiationService;
    invokeFunction<R, TS extends any[] = []>(fn: (accessor: ServicesAccessor, ...args: TS) => R, ...args: TS): R;
    createInstance(ctorOrDescriptor: any | SyncDescriptor<any>, ...rest: any[]): any;
    private _createInstance;
    private _setServiceInstance;
    private _getServiceInstanceOrDescriptor;
    protected _getOrCreateServiceInstance<T>(id: ServiceIdentifier<T>, _trace: Trace): T;
    private readonly _activeInstantiations;
    private _safeCreateAndCacheServiceInstance;
    private _createAndCacheServiceInstance;
    private _createServiceInstanceWithOwner;
    private _createServiceInstance;
    private _throwIfStrict;
}
declare const enum TraceType {
    Creation = 0,
    Invocation = 1,
    Branch = 2
}
export declare class Trace {
    readonly type: TraceType;
    readonly name: string | null;
    private static readonly _None;
    static traceInvocation(ctor: any): Trace;
    static traceCreation(ctor: any): Trace;
    private static _totals;
    private readonly _start;
    private readonly _dep;
    private constructor();
    branch(id: ServiceIdentifier<any>, first: boolean): Trace;
    stop(): void;
}
export {};
//# sourceMappingURL=instantiationService.d.ts.map