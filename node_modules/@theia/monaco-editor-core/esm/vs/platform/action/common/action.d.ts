import { UriDto } from '../../../base/common/types';
import { URI } from '../../../base/common/uri';
import { ContextKeyExpression } from '../../contextkey/common/contextkey';
import { ThemeIcon } from '../../theme/common/themeService';
export interface ILocalizedString {
    /**
     * The localized value of the string.
     */
    value: string;
    /**
     * The original (non localized value of the string)
     */
    original: string;
}
export interface ICommandActionTitle extends ILocalizedString {
    /**
     * The title with a mnemonic designation. && precedes the mnemonic.
     */
    mnemonicTitle?: string;
}
export declare type Icon = {
    dark?: URI;
    light?: URI;
} | ThemeIcon;
export interface ICommandAction {
    id: string;
    title: string | ICommandActionTitle;
    shortTitle?: string | ICommandActionTitle;
    category?: string | ILocalizedString;
    tooltip?: string | ILocalizedString;
    icon?: Icon;
    source?: string;
    precondition?: ContextKeyExpression;
    toggled?: ContextKeyExpression | {
        condition: ContextKeyExpression;
        icon?: Icon;
        tooltip?: string;
        title?: string | ILocalizedString;
    };
}
export declare type ISerializableCommandAction = UriDto<ICommandAction>;
//# sourceMappingURL=action.d.ts.map