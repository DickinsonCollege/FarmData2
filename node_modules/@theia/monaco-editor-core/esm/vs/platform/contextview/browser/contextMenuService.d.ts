import { IContextMenuDelegate } from '../../../base/browser/contextmenu';
import { Disposable } from '../../../base/common/lifecycle';
import { IKeybindingService } from '../../keybinding/common/keybinding';
import { INotificationService } from '../../notification/common/notification';
import { ITelemetryService } from '../../telemetry/common/telemetry';
import { IThemeService } from '../../theme/common/themeService';
import { IContextMenuHandlerOptions } from './contextMenuHandler';
import { IContextMenuService, IContextViewService } from './contextView';
export declare class ContextMenuService extends Disposable implements IContextMenuService {
    readonly _serviceBrand: undefined;
    private contextMenuHandler;
    private readonly _onDidShowContextMenu;
    readonly onDidShowContextMenu: import("../../../base/common/event").Event<void>;
    private readonly _onDidHideContextMenu;
    readonly onDidHideContextMenu: import("../../../base/common/event").Event<void>;
    constructor(telemetryService: ITelemetryService, notificationService: INotificationService, contextViewService: IContextViewService, keybindingService: IKeybindingService, themeService: IThemeService);
    configure(options: IContextMenuHandlerOptions): void;
    showContextMenu(delegate: IContextMenuDelegate): void;
}
//# sourceMappingURL=contextMenuService.d.ts.map