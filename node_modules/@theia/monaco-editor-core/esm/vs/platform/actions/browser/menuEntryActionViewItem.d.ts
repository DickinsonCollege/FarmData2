import { ActionViewItem, BaseActionViewItem } from '../../../base/browser/ui/actionbar/actionViewItems';
import { DropdownMenuActionViewItem, IDropdownMenuActionViewItemOptions } from '../../../base/browser/ui/dropdown/dropdownActionViewItem';
import { IAction, SubmenuAction } from '../../../base/common/actions';
import { IDisposable } from '../../../base/common/lifecycle';
import './menuEntryActionViewItem.css';
import { IMenu, IMenuActionOptions, MenuItemAction, SubmenuItemAction } from '../common/actions';
import { IContextKeyService } from '../../contextkey/common/contextkey';
import { IContextMenuService } from '../../contextview/browser/contextView';
import { IInstantiationService } from '../../instantiation/common/instantiation';
import { IKeybindingService } from '../../keybinding/common/keybinding';
import { INotificationService } from '../../notification/common/notification';
export declare function createAndFillInContextMenuActions(menu: IMenu, options: IMenuActionOptions | undefined, target: IAction[] | {
    primary: IAction[];
    secondary: IAction[];
}, primaryGroup?: string): IDisposable;
export declare function createAndFillInActionBarActions(menu: IMenu, options: IMenuActionOptions | undefined, target: IAction[] | {
    primary: IAction[];
    secondary: IAction[];
}, primaryGroup?: string | ((actionGroup: string) => boolean), primaryMaxCount?: number, shouldInlineSubmenu?: (action: SubmenuAction, group: string, groupSize: number) => boolean, useSeparatorsInPrimaryActions?: boolean): IDisposable;
export interface IMenuEntryActionViewItemOptions {
    draggable?: boolean;
}
export declare class MenuEntryActionViewItem extends ActionViewItem {
    protected readonly _keybindingService: IKeybindingService;
    protected _notificationService: INotificationService;
    protected _contextKeyService: IContextKeyService;
    private _wantsAltCommand;
    private readonly _itemClassDispose;
    private readonly _altKey;
    constructor(_action: MenuItemAction, options: IMenuEntryActionViewItemOptions | undefined, _keybindingService: IKeybindingService, _notificationService: INotificationService, _contextKeyService: IContextKeyService);
    protected get _menuItemAction(): MenuItemAction;
    protected get _commandAction(): MenuItemAction;
    onClick(event: MouseEvent): Promise<void>;
    render(container: HTMLElement): void;
    updateLabel(): void;
    updateTooltip(): void;
    updateClass(): void;
    private _updateItemClass;
}
export declare class SubmenuEntryActionViewItem extends DropdownMenuActionViewItem {
    constructor(action: SubmenuItemAction, options: IDropdownMenuActionViewItemOptions | undefined, contextMenuService: IContextMenuService);
    render(container: HTMLElement): void;
}
/**
 * Creates action view items for menu actions or submenu actions.
 */
export declare function createActionViewItem(instaService: IInstantiationService, action: IAction, options?: IDropdownMenuActionViewItemOptions): undefined | MenuEntryActionViewItem | SubmenuEntryActionViewItem | BaseActionViewItem;
//# sourceMappingURL=menuEntryActionViewItem.d.ts.map