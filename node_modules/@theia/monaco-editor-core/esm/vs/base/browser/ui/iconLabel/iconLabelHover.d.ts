import { IHoverDelegate } from './iconHoverDelegate';
import { CancellationToken } from '../../../common/cancellation';
import { IMarkdownString } from '../../../common/htmlContent';
import { IDisposable } from '../../../common/lifecycle';
export interface ITooltipMarkdownString {
    markdown: IMarkdownString | string | undefined | ((token: CancellationToken) => Promise<IMarkdownString | string | undefined>);
    markdownNotSupportedFallback: string | undefined;
}
export declare function setupNativeHover(htmlElement: HTMLElement, tooltip: string | ITooltipMarkdownString | undefined): void;
export declare type IHoverContent = string | ITooltipMarkdownString | HTMLElement | undefined;
export interface ICustomHover extends IDisposable {
    /**
     * Allows to programmatically open the hover.
     */
    show(focus?: boolean): void;
    /**
     * Allows to programmatically hide the hover.
     */
    hide(): void;
    /**
     * Updates the contents of the hover.
     */
    update(tooltip: IHoverContent): void;
}
export declare function setupCustomHover(hoverDelegate: IHoverDelegate, htmlElement: HTMLElement, content: IHoverContent): ICustomHover;
//# sourceMappingURL=iconLabelHover.d.ts.map