import { IContextMenuProvider } from '../../contextmenu';
import { IAction, IActionRunner } from '../../../common/actions';
import { CSSIcon } from '../../../common/codicons';
import { Color } from '../../../common/color';
import { Event as BaseEvent } from '../../../common/event';
import { Disposable, IDisposable } from '../../../common/lifecycle';
import './button.css';
export interface IButtonOptions extends IButtonStyles {
    readonly title?: boolean | string;
    readonly supportIcons?: boolean;
    readonly secondary?: boolean;
}
export interface IButtonStyles {
    buttonBackground?: Color;
    buttonHoverBackground?: Color;
    buttonForeground?: Color;
    buttonSecondaryBackground?: Color;
    buttonSecondaryHoverBackground?: Color;
    buttonSecondaryForeground?: Color;
    buttonBorder?: Color;
}
export interface IButton extends IDisposable {
    readonly element: HTMLElement;
    readonly onDidClick: BaseEvent<Event | undefined>;
    label: string;
    icon: CSSIcon;
    enabled: boolean;
    style(styles: IButtonStyles): void;
    focus(): void;
    hasFocus(): boolean;
}
export interface IButtonWithDescription extends IButton {
    description: string;
}
export declare class Button extends Disposable implements IButton {
    protected _element: HTMLElement;
    protected options: IButtonOptions;
    private buttonBackground;
    private buttonHoverBackground;
    private buttonForeground;
    private buttonSecondaryBackground;
    private buttonSecondaryHoverBackground;
    private buttonSecondaryForeground;
    private buttonBorder;
    private _onDidClick;
    get onDidClick(): BaseEvent<Event>;
    private focusTracker;
    constructor(container: HTMLElement, options?: IButtonOptions);
    private setHoverBackground;
    style(styles: IButtonStyles): void;
    private applyStyles;
    get element(): HTMLElement;
    set label(value: string);
    set icon(icon: CSSIcon);
    set enabled(value: boolean);
    get enabled(): boolean;
    focus(): void;
    hasFocus(): boolean;
}
export interface IButtonWithDropdownOptions extends IButtonOptions {
    readonly contextMenuProvider: IContextMenuProvider;
    readonly actions: IAction[];
    readonly actionRunner?: IActionRunner;
}
export declare class ButtonWithDropdown extends Disposable implements IButton {
    private readonly button;
    private readonly action;
    private readonly dropdownButton;
    readonly element: HTMLElement;
    private readonly _onDidClick;
    readonly onDidClick: BaseEvent<Event | undefined>;
    constructor(container: HTMLElement, options: IButtonWithDropdownOptions);
    set label(value: string);
    set icon(icon: CSSIcon);
    set enabled(enabled: boolean);
    get enabled(): boolean;
    style(styles: IButtonStyles): void;
    focus(): void;
    hasFocus(): boolean;
}
export declare class ButtonWithDescription extends Button implements IButtonWithDescription {
    private _labelElement;
    private _descriptionElement;
    constructor(container: HTMLElement, options?: IButtonOptions);
    set label(value: string);
    set description(value: string);
}
export declare class ButtonBar extends Disposable {
    private readonly container;
    private _buttons;
    constructor(container: HTMLElement);
    get buttons(): IButton[];
    addButton(options?: IButtonOptions): IButton;
    addButtonWithDescription(options?: IButtonOptions): IButtonWithDescription;
    addButtonWithDropdown(options: IButtonWithDropdownOptions): IButton;
    private pushButton;
}
//# sourceMappingURL=button.d.ts.map