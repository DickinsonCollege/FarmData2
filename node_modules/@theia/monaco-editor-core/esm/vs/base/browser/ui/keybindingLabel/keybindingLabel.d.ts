import { Color } from '../../../common/color';
import { ResolvedKeybinding } from '../../../common/keybindings';
import { OperatingSystem } from '../../../common/platform';
import { IThemable } from '../../../common/styler';
import './keybindingLabel.css';
export interface PartMatches {
    ctrlKey?: boolean;
    shiftKey?: boolean;
    altKey?: boolean;
    metaKey?: boolean;
    keyCode?: boolean;
}
export interface Matches {
    firstPart: PartMatches;
    chordPart: PartMatches;
}
export interface KeybindingLabelOptions extends IKeybindingLabelStyles {
    renderUnboundKeybindings?: boolean;
}
export interface IKeybindingLabelStyles {
    keybindingLabelBackground?: Color;
    keybindingLabelForeground?: Color;
    keybindingLabelBorder?: Color;
    keybindingLabelBottomBorder?: Color;
    keybindingLabelShadow?: Color;
}
export declare class KeybindingLabel implements IThemable {
    private os;
    private domNode;
    private options;
    private readonly keyElements;
    private keybinding;
    private matches;
    private didEverRender;
    private labelBackground;
    private labelForeground;
    private labelBorder;
    private labelBottomBorder;
    private labelShadow;
    constructor(container: HTMLElement, os: OperatingSystem, options?: KeybindingLabelOptions);
    get element(): HTMLElement;
    set(keybinding: ResolvedKeybinding | undefined, matches?: Matches): void;
    private render;
    private clear;
    private renderPart;
    private renderKey;
    private renderUnbound;
    private createKeyElement;
    style(styles: IKeybindingLabelStyles): void;
    private applyStyles;
    private static areSame;
}
//# sourceMappingURL=keybindingLabel.d.ts.map