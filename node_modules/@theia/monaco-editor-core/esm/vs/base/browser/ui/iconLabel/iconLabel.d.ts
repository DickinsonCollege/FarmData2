import { IHoverDelegate } from './iconHoverDelegate';
import { ITooltipMarkdownString } from './iconLabelHover';
import { IMatch } from '../../../common/filters';
import { Disposable } from '../../../common/lifecycle';
import './iconlabel.css';
export interface IIconLabelCreationOptions {
    supportHighlights?: boolean;
    supportDescriptionHighlights?: boolean;
    supportIcons?: boolean;
    hoverDelegate?: IHoverDelegate;
}
export interface IIconLabelValueOptions {
    title?: string | ITooltipMarkdownString;
    descriptionTitle?: string;
    hideIcon?: boolean;
    extraClasses?: string[];
    italic?: boolean;
    strikethrough?: boolean;
    matches?: IMatch[];
    labelEscapeNewLines?: boolean;
    descriptionMatches?: IMatch[];
    readonly separator?: string;
    readonly domId?: string;
}
export declare class IconLabel extends Disposable {
    private readonly domNode;
    private readonly nameNode;
    private readonly descriptionContainer;
    private descriptionNode;
    private readonly descriptionNodeFactory;
    private readonly labelContainer;
    private readonly hoverDelegate;
    private readonly customHovers;
    constructor(container: HTMLElement, options?: IIconLabelCreationOptions);
    get element(): HTMLElement;
    setLabel(label: string | string[], description?: string, options?: IIconLabelValueOptions): void;
    private setupHover;
    dispose(): void;
}
//# sourceMappingURL=iconLabel.d.ts.map