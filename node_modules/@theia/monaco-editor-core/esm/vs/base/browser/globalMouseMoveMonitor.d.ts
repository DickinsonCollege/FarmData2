import { IDisposable } from '../common/lifecycle';
export interface IStandardMouseMoveEventData {
    leftButton: boolean;
    buttons: number;
    posx: number;
    posy: number;
}
export interface IEventMerger<R> {
    (lastEvent: R | null, currentEvent: MouseEvent): R;
}
export interface IMouseMoveCallback<R> {
    (mouseMoveData: R): void;
}
export interface IOnStopCallback {
    (browserEvent?: MouseEvent | KeyboardEvent): void;
}
export declare function standardMouseMoveMerger(lastEvent: IStandardMouseMoveEventData | null, currentEvent: MouseEvent): IStandardMouseMoveEventData;
export declare class GlobalMouseMoveMonitor<R extends {
    buttons: number;
}> implements IDisposable {
    private readonly _hooks;
    private _mouseMoveEventMerger;
    private _mouseMoveCallback;
    private _onStopCallback;
    dispose(): void;
    stopMonitoring(invokeStopCallback: boolean, browserEvent?: MouseEvent | KeyboardEvent): void;
    isMonitoring(): boolean;
    startMonitoring(initialElement: HTMLElement, initialButtons: number, mouseMoveEventMerger: IEventMerger<R>, mouseMoveCallback: IMouseMoveCallback<R>, onStopCallback: IOnStopCallback): void;
}
//# sourceMappingURL=globalMouseMoveMonitor.d.ts.map