import { CancellationToken } from './cancellation';
import { IDisposable } from './lifecycle';
export interface CacheResult<T> extends IDisposable {
    promise: Promise<T>;
}
export declare class Cache<T> {
    private task;
    private result;
    constructor(task: (ct: CancellationToken) => Promise<T>);
    get(): CacheResult<T>;
}
/**
 * Uses a LRU cache to make a given parametrized function cached.
 * Caches just the last value.
 * The key must be JSON serializable.
*/
export declare class LRUCachedComputed<TArg, TComputed> {
    private readonly computeFn;
    private lastCache;
    private lastArgKey;
    constructor(computeFn: (arg: TArg) => TComputed);
    get(arg: TArg): TComputed;
}
//# sourceMappingURL=cache.d.ts.map