import { StandardMouseEvent } from '../../base/browser/mouseEvent';
import { Disposable, IDisposable } from '../../base/common/lifecycle';
import { ICodeEditor } from './editorBrowser';
import { ThemeColor } from '../../platform/theme/common/themeService';
/**
 * Coordinates relative to the whole document (e.g. mouse event's pageX and pageY)
 */
export declare class PageCoordinates {
    readonly x: number;
    readonly y: number;
    _pageCoordinatesBrand: void;
    constructor(x: number, y: number);
    toClientCoordinates(): ClientCoordinates;
}
/**
 * Coordinates within the application's client area (i.e. origin is document's scroll position).
 *
 * For example, clicking in the top-left corner of the client area will
 * always result in a mouse event with a client.x value of 0, regardless
 * of whether the page is scrolled horizontally.
 */
export declare class ClientCoordinates {
    readonly clientX: number;
    readonly clientY: number;
    _clientCoordinatesBrand: void;
    constructor(clientX: number, clientY: number);
    toPageCoordinates(): PageCoordinates;
}
/**
 * The position of the editor in the page.
 */
export declare class EditorPagePosition {
    readonly x: number;
    readonly y: number;
    readonly width: number;
    readonly height: number;
    _editorPagePositionBrand: void;
    constructor(x: number, y: number, width: number, height: number);
}
/**
 * Coordinates relative to the the (top;left) of the editor that can be used safely with other internal editor metrics.
 * **NOTE**: This position is obtained by taking page coordinates and transforming them relative to the
 * editor's (top;left) position in a way in which scale transformations are taken into account.
 * **NOTE**: These coordinates could be negative if the mouse position is outside the editor.
 */
export declare class CoordinatesRelativeToEditor {
    readonly x: number;
    readonly y: number;
    _positionRelativeToEditorBrand: void;
    constructor(x: number, y: number);
}
export declare function createEditorPagePosition(editorViewDomNode: HTMLElement): EditorPagePosition;
export declare function createCoordinatesRelativeToEditor(editorViewDomNode: HTMLElement, editorPagePosition: EditorPagePosition, pos: PageCoordinates): CoordinatesRelativeToEditor;
export declare class EditorMouseEvent extends StandardMouseEvent {
    _editorMouseEventBrand: void;
    /**
     * Coordinates relative to the whole document.
     */
    readonly pos: PageCoordinates;
    /**
     * Editor's coordinates relative to the whole document.
     */
    readonly editorPos: EditorPagePosition;
    /**
     * Coordinates relative to the (top;left) of the editor.
     * *NOTE*: These coordinates are preferred because they take into account transformations applied to the editor.
     * *NOTE*: These coordinates could be negative if the mouse position is outside the editor.
     */
    readonly relativePos: CoordinatesRelativeToEditor;
    constructor(e: MouseEvent, editorViewDomNode: HTMLElement);
}
export interface EditorMouseEventMerger {
    (lastEvent: EditorMouseEvent | null, currentEvent: EditorMouseEvent): EditorMouseEvent;
}
export declare class EditorMouseEventFactory {
    private readonly _editorViewDomNode;
    constructor(editorViewDomNode: HTMLElement);
    private _create;
    onContextMenu(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onMouseUp(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onMouseDown(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onMouseLeave(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onMouseMoveThrottled(target: HTMLElement, callback: (e: EditorMouseEvent) => void, merger: EditorMouseEventMerger, minimumTimeMs: number): IDisposable;
}
export declare class EditorPointerEventFactory {
    private readonly _editorViewDomNode;
    constructor(editorViewDomNode: HTMLElement);
    private _create;
    onPointerUp(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onPointerDown(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onPointerLeave(target: HTMLElement, callback: (e: EditorMouseEvent) => void): IDisposable;
    onPointerMoveThrottled(target: HTMLElement, callback: (e: EditorMouseEvent) => void, merger: EditorMouseEventMerger, minimumTimeMs: number): IDisposable;
}
export declare class GlobalEditorMouseMoveMonitor extends Disposable {
    private readonly _editorViewDomNode;
    private readonly _globalMouseMoveMonitor;
    private _keydownListener;
    constructor(editorViewDomNode: HTMLElement);
    startMonitoring(initialElement: HTMLElement, initialButtons: number, merger: EditorMouseEventMerger, mouseMoveCallback: (e: EditorMouseEvent) => void, onStopCallback: (browserEvent?: MouseEvent | KeyboardEvent) => void): void;
    stopMonitoring(): void;
}
/**
 * A helper to create dynamic css rules, bound to a class name.
 * Rules are reused.
 * Reference counting and delayed garbage collection ensure that no rules leak.
*/
export declare class DynamicCssRules {
    private readonly _editor;
    private static _idPool;
    private readonly _instanceId;
    private _counter;
    private readonly _rules;
    private readonly _garbageCollectionScheduler;
    constructor(_editor: ICodeEditor);
    createClassNameRef(options: CssProperties): ClassNameReference;
    private getOrCreateRule;
    private computeUniqueKey;
    private garbageCollect;
}
export interface ClassNameReference extends IDisposable {
    className: string;
}
export interface CssProperties {
    border?: string;
    borderColor?: string | ThemeColor;
    borderRadius?: string;
    fontStyle?: string;
    fontWeight?: string;
    fontSize?: string;
    fontFamily?: string;
    textDecoration?: string;
    color?: string | ThemeColor;
    backgroundColor?: string | ThemeColor;
    opacity?: string;
    verticalAlign?: string;
    cursor?: string;
    margin?: string;
    padding?: string;
    width?: string;
    height?: string;
    display?: string;
}
//# sourceMappingURL=editorDom.d.ts.map