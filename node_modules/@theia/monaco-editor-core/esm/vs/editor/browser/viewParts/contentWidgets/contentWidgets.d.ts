import { FastDomNode } from '../../../../base/browser/fastDomNode';
import { ContentWidgetPositionPreference, IContentWidget } from '../../editorBrowser';
import { ViewPart } from '../../view/viewPart';
import { IRange } from '../../../common/core/range';
import { RenderingContext, RestrictedRenderingContext } from '../../view/renderingContext';
import { ViewContext } from '../../../common/viewModel/viewContext';
import * as viewEvents from '../../../common/viewEvents';
import { ViewportData } from '../../../common/viewLayout/viewLinesViewportData';
export declare class ViewContentWidgets extends ViewPart {
    private readonly _viewDomNode;
    private _widgets;
    domNode: FastDomNode<HTMLElement>;
    overflowingContentWidgetsDomNode: FastDomNode<HTMLElement>;
    constructor(context: ViewContext, viewDomNode: FastDomNode<HTMLElement>);
    dispose(): void;
    onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean;
    onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean;
    onFlushed(e: viewEvents.ViewFlushedEvent): boolean;
    onLineMappingChanged(e: viewEvents.ViewLineMappingChangedEvent): boolean;
    onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean;
    onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean;
    onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean;
    onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean;
    onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean;
    addWidget(_widget: IContentWidget): void;
    setWidgetPosition(widget: IContentWidget, range: IRange | null, preference: ContentWidgetPositionPreference[] | null): void;
    removeWidget(widget: IContentWidget): void;
    shouldSuppressMouseDownOnWidget(widgetId: string): boolean;
    onBeforeRender(viewportData: ViewportData): void;
    prepareRender(ctx: RenderingContext): void;
    render(ctx: RestrictedRenderingContext): void;
}
//# sourceMappingURL=contentWidgets.d.ts.map