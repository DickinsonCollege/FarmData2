import { Event } from '../../../base/common/event';
import { IDisposable } from '../../../base/common/lifecycle';
import { ConfigurationChangedEvent, IComputedEditorOptions, IEditorOptions } from './editorOptions';
import { IDimension } from '../core/dimension';
export interface IEditorConfiguration extends IDisposable {
    /**
     * Is this a simple widget (not a real code editor)?
     */
    readonly isSimpleWidget: boolean;
    /**
     * Computed editor options.
     */
    readonly options: IComputedEditorOptions;
    /**
     * The `options` have changed (quick event)
     */
    onDidChangeFast: Event<ConfigurationChangedEvent>;
    /**
     * The `options` have changed (slow event)
     */
    onDidChange: Event<ConfigurationChangedEvent>;
    /**
     * Get the raw options as they were passed in to the editor
     * and merged with all calls to `updateOptions`.
     */
    getRawOptions(): IEditorOptions;
    /**
     * Update the options with new partial options. All previous
     * options will be kept and only present keys will be overwritten.
     */
    updateOptions(newOptions: Readonly<IEditorOptions>): void;
    /**
     * Recompute options with new reference element dimensions.
     */
    observeContainer(dimension?: IDimension): void;
    /**
     * Set if the current model is dominated by long lines.
     */
    setIsDominatedByLongLines(isDominatedByLongLines: boolean): void;
    /**
     * Set the current model line count.
     */
    setModelLineCount(modelLineCount: number): void;
    /**
     * Set the current view model line count.
     */
    setViewLineCount(viewLineCount: number): void;
    /**
     * Set reserved height above.
     */
    setReservedHeight(reservedHeight: number): void;
}
//# sourceMappingURL=editorConfiguration.d.ts.map