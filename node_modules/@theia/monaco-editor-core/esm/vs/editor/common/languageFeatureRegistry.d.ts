import { IDisposable } from '../../base/common/lifecycle';
import { ITextModel } from './model';
import { LanguageSelector } from './languageSelector';
import { URI } from '../../base/common/uri';
export interface NotebooTypeResolver {
    (uri: URI): string | undefined;
}
export declare class LanguageFeatureRegistry<T> {
    private readonly _notebookTypeResolver?;
    private _clock;
    private readonly _entries;
    private readonly _onDidChange;
    readonly onDidChange: import("../../base/common/event").Event<number>;
    constructor(_notebookTypeResolver?: NotebooTypeResolver | undefined);
    register(selector: LanguageSelector, provider: T): IDisposable;
    has(model: ITextModel): boolean;
    all(model: ITextModel): T[];
    ordered(model: ITextModel): T[];
    orderedGroups(model: ITextModel): T[][];
    private _orderedForEach;
    private _lastCandidate;
    private _updateScores;
    private static _compareByScoreAndTime;
}
//# sourceMappingURL=languageFeatureRegistry.d.ts.map