import { Disposable } from '../../../../../base/common/lifecycle';
import { Range } from '../../../core/range';
import { BracketInfo, BracketPairWithMinIndentationInfo } from '../../../textModelBracketPairs';
import { TextModel } from '../../textModel';
import { IModelContentChangedEvent, IModelTokensChangedEvent } from '../../../textModelEvents';
import { ResolvedLanguageConfiguration } from '../../../languages/languageConfigurationRegistry';
export declare class BracketPairsTree extends Disposable {
    private readonly textModel;
    private readonly getLanguageConfiguration;
    private readonly didChangeEmitter;
    private initialAstWithoutTokens;
    private astWithTokens;
    private readonly denseKeyProvider;
    private readonly brackets;
    didLanguageChange(languageId: string): boolean;
    readonly onDidChange: import("../../../../../base/common/event").Event<void>;
    constructor(textModel: TextModel, getLanguageConfiguration: (languageId: string) => ResolvedLanguageConfiguration);
    handleDidChangeBackgroundTokenizationState(): void;
    handleDidChangeTokens({ ranges }: IModelTokensChangedEvent): void;
    handleContentChanged(change: IModelContentChangedEvent): void;
    /**
     * @pure (only if isPure = true)
    */
    private parseDocumentFromTextBuffer;
    getBracketsInRange(range: Range): BracketInfo[];
    getBracketPairsInRange(range: Range, includeMinIndentation: boolean): BracketPairWithMinIndentationInfo[];
}
//# sourceMappingURL=bracketPairsTree.d.ts.map