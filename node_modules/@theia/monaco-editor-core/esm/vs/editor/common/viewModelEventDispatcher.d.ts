import { ViewEventHandler } from './viewEventHandler';
import { ViewEvent } from './viewEvents';
import { IContentSizeChangedEvent } from './editorCommon';
import { Selection } from './core/selection';
import { Disposable } from '../../base/common/lifecycle';
import { CursorChangeReason } from './cursorEvents';
export declare class ViewModelEventDispatcher extends Disposable {
    private readonly _onEvent;
    readonly onEvent: import("../../base/common/event").Event<OutgoingViewModelEvent>;
    private readonly _eventHandlers;
    private _viewEventQueue;
    private _isConsumingViewEventQueue;
    private _collector;
    private _collectorCnt;
    private _outgoingEvents;
    constructor();
    emitOutgoingEvent(e: OutgoingViewModelEvent): void;
    private _addOutgoingEvent;
    private _emitOutgoingEvents;
    addViewEventHandler(eventHandler: ViewEventHandler): void;
    removeViewEventHandler(eventHandler: ViewEventHandler): void;
    beginEmitViewEvents(): ViewModelEventsCollector;
    endEmitViewEvents(): void;
    emitSingleViewEvent(event: ViewEvent): void;
    private _emitMany;
    private _consumeViewEventQueue;
    private _doConsumeQueue;
}
export declare class ViewModelEventsCollector {
    readonly viewEvents: ViewEvent[];
    readonly outgoingEvents: OutgoingViewModelEvent[];
    constructor();
    emitViewEvent(event: ViewEvent): void;
    emitOutgoingEvent(e: OutgoingViewModelEvent): void;
}
export declare type OutgoingViewModelEvent = (ContentSizeChangedEvent | FocusChangedEvent | ScrollChangedEvent | ViewZonesChangedEvent | HiddenAreasChangedEvent | ReadOnlyEditAttemptEvent | CursorStateChangedEvent);
export declare const enum OutgoingViewModelEventKind {
    ContentSizeChanged = 0,
    FocusChanged = 1,
    ScrollChanged = 2,
    ViewZonesChanged = 3,
    HiddenAreasChanged = 4,
    ReadOnlyEditAttempt = 5,
    CursorStateChanged = 6
}
export declare class ContentSizeChangedEvent implements IContentSizeChangedEvent {
    readonly kind = OutgoingViewModelEventKind.ContentSizeChanged;
    private readonly _oldContentWidth;
    private readonly _oldContentHeight;
    readonly contentWidth: number;
    readonly contentHeight: number;
    readonly contentWidthChanged: boolean;
    readonly contentHeightChanged: boolean;
    constructor(oldContentWidth: number, oldContentHeight: number, contentWidth: number, contentHeight: number);
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): ContentSizeChangedEvent;
}
export declare class FocusChangedEvent {
    readonly kind = OutgoingViewModelEventKind.FocusChanged;
    readonly oldHasFocus: boolean;
    readonly hasFocus: boolean;
    constructor(oldHasFocus: boolean, hasFocus: boolean);
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): FocusChangedEvent;
}
export declare class ScrollChangedEvent {
    readonly kind = OutgoingViewModelEventKind.ScrollChanged;
    private readonly _oldScrollWidth;
    private readonly _oldScrollLeft;
    private readonly _oldScrollHeight;
    private readonly _oldScrollTop;
    readonly scrollWidth: number;
    readonly scrollLeft: number;
    readonly scrollHeight: number;
    readonly scrollTop: number;
    readonly scrollWidthChanged: boolean;
    readonly scrollLeftChanged: boolean;
    readonly scrollHeightChanged: boolean;
    readonly scrollTopChanged: boolean;
    constructor(oldScrollWidth: number, oldScrollLeft: number, oldScrollHeight: number, oldScrollTop: number, scrollWidth: number, scrollLeft: number, scrollHeight: number, scrollTop: number);
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): ScrollChangedEvent;
}
export declare class ViewZonesChangedEvent {
    readonly kind = OutgoingViewModelEventKind.ViewZonesChanged;
    constructor();
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): ViewZonesChangedEvent;
}
export declare class HiddenAreasChangedEvent {
    readonly kind = OutgoingViewModelEventKind.HiddenAreasChanged;
    constructor();
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): HiddenAreasChangedEvent;
}
export declare class CursorStateChangedEvent {
    readonly kind = OutgoingViewModelEventKind.CursorStateChanged;
    readonly oldSelections: Selection[] | null;
    readonly selections: Selection[];
    readonly oldModelVersionId: number;
    readonly modelVersionId: number;
    readonly source: string;
    readonly reason: CursorChangeReason;
    readonly reachedMaxCursorCount: boolean;
    constructor(oldSelections: Selection[] | null, selections: Selection[], oldModelVersionId: number, modelVersionId: number, source: string, reason: CursorChangeReason, reachedMaxCursorCount: boolean);
    private static _selectionsAreEqual;
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): CursorStateChangedEvent;
}
export declare class ReadOnlyEditAttemptEvent {
    readonly kind = OutgoingViewModelEventKind.ReadOnlyEditAttempt;
    constructor();
    isNoOp(): boolean;
    merge(other: OutgoingViewModelEvent): ReadOnlyEditAttemptEvent;
}
//# sourceMappingURL=viewModelEventDispatcher.d.ts.map