import { CursorConfiguration, CursorState, EditOperationType, IColumnSelectData, PartialCursorState, ICursorSimpleModel } from '../cursorCommon';
import { CursorContext } from './cursorContext';
import { CursorChangeReason } from '../cursorEvents';
import { Position } from '../core/position';
import { Range } from '../core/range';
import { ISelection, Selection } from '../core/selection';
import * as editorCommon from '../editorCommon';
import { ITextModel, ICursorStateComputer, IIdentifiedSingleEditOperation } from '../model';
import { ModelRawContentChangedEvent, ModelInjectedTextChangedEvent } from '../textModelEvents';
import { VerticalRevealType } from '../viewEvents';
import { Disposable } from '../../../base/common/lifecycle';
import { ICoordinatesConverter } from '../viewModel';
import { ViewModelEventsCollector } from '../viewModelEventDispatcher';
export declare class CursorsController extends Disposable {
    static readonly MAX_CURSOR_COUNT = 10000;
    private readonly _model;
    private _knownModelVersionId;
    private readonly _viewModel;
    private readonly _coordinatesConverter;
    context: CursorContext;
    private _cursors;
    private _hasFocus;
    private _isHandling;
    private _isDoingComposition;
    private _selectionsWhenCompositionStarted;
    private _columnSelectData;
    private _autoClosedActions;
    private _prevEditOperationType;
    constructor(model: ITextModel, viewModel: ICursorSimpleModel, coordinatesConverter: ICoordinatesConverter, cursorConfig: CursorConfiguration);
    dispose(): void;
    updateConfiguration(cursorConfig: CursorConfiguration): void;
    onLineMappingChanged(eventsCollector: ViewModelEventsCollector): void;
    setHasFocus(hasFocus: boolean): void;
    private _validateAutoClosedActions;
    getPrimaryCursorState(): CursorState;
    getLastAddedCursorIndex(): number;
    getCursorStates(): CursorState[];
    setStates(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): boolean;
    setCursorColumnSelectData(columnSelectData: IColumnSelectData): void;
    revealPrimary(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, minimalReveal: boolean, verticalType: VerticalRevealType, revealHorizontal: boolean, scrollType: editorCommon.ScrollType): void;
    saveState(): editorCommon.ICursorState[];
    restoreState(eventsCollector: ViewModelEventsCollector, states: editorCommon.ICursorState[]): void;
    onModelContentChanged(eventsCollector: ViewModelEventsCollector, e: ModelRawContentChangedEvent | ModelInjectedTextChangedEvent): void;
    getSelection(): Selection;
    getTopMostViewPosition(): Position;
    getBottomMostViewPosition(): Position;
    getCursorColumnSelectData(): IColumnSelectData;
    getSelections(): Selection[];
    getPosition(): Position;
    setSelections(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, selections: readonly ISelection[], reason: CursorChangeReason): void;
    getPrevEditOperationType(): EditOperationType;
    setPrevEditOperationType(type: EditOperationType): void;
    private _pushAutoClosedAction;
    private _executeEditOperation;
    private _interpretCommandResult;
    private _emitStateChangedIfNecessary;
    private _findAutoClosingPairs;
    executeEdits(eventsCollector: ViewModelEventsCollector, source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): void;
    private _executeEdit;
    setIsDoingComposition(isDoingComposition: boolean): void;
    getAutoClosedCharacters(): Range[];
    startComposition(eventsCollector: ViewModelEventsCollector): void;
    endComposition(eventsCollector: ViewModelEventsCollector, source?: string | null | undefined): void;
    type(eventsCollector: ViewModelEventsCollector, text: string, source?: string | null | undefined): void;
    compositionType(eventsCollector: ViewModelEventsCollector, text: string, replacePrevCharCnt: number, replaceNextCharCnt: number, positionDelta: number, source?: string | null | undefined): void;
    paste(eventsCollector: ViewModelEventsCollector, text: string, pasteOnNewLine: boolean, multicursorText?: string[] | null | undefined, source?: string | null | undefined): void;
    cut(eventsCollector: ViewModelEventsCollector, source?: string | null | undefined): void;
    executeCommand(eventsCollector: ViewModelEventsCollector, command: editorCommon.ICommand, source?: string | null | undefined): void;
    executeCommands(eventsCollector: ViewModelEventsCollector, commands: editorCommon.ICommand[], source?: string | null | undefined): void;
}
//# sourceMappingURL=cursor.d.ts.map