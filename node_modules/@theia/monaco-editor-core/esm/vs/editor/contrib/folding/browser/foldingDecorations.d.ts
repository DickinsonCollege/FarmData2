import { ICodeEditor } from '../../../browser/editorBrowser';
import { IModelDecorationsChangeAccessor, IModelDeltaDecoration } from '../../../common/model';
import { ModelDecorationOptions } from '../../../common/model/textModel';
import { IDecorationProvider } from './foldingModel';
import { ThemeIcon } from '../../../../platform/theme/common/themeService';
export declare const foldingExpandedIcon: ThemeIcon;
export declare const foldingCollapsedIcon: ThemeIcon;
export declare class FoldingDecorationProvider implements IDecorationProvider {
    private readonly editor;
    private static readonly COLLAPSED_VISUAL_DECORATION;
    private static readonly COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION;
    private static readonly EXPANDED_AUTO_HIDE_VISUAL_DECORATION;
    private static readonly EXPANDED_VISUAL_DECORATION;
    private static readonly HIDDEN_RANGE_DECORATION;
    autoHideFoldingControls: boolean;
    showFoldingHighlights: boolean;
    constructor(editor: ICodeEditor);
    getDecorationOption(isCollapsed: boolean, isHidden: boolean): ModelDecorationOptions;
    deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];
    changeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T;
}
//# sourceMappingURL=foldingDecorations.d.ts.map