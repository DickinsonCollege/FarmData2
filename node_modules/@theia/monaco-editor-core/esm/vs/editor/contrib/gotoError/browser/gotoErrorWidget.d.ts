import { Event } from '../../../../base/common/event';
import './media/gotoErrorWidget.css';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { PeekViewWidget } from '../../peekView/browser/peekView';
import { IMenuService, MenuId } from '../../../../platform/actions/common/actions';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { ILabelService } from '../../../../platform/label/common/label';
import { IMarker, IRelatedInformation } from '../../../../platform/markers/common/markers';
import { IOpenerService } from '../../../../platform/opener/common/opener';
import { IThemeService } from '../../../../platform/theme/common/themeService';
export declare class MarkerNavigationWidget extends PeekViewWidget {
    private readonly _themeService;
    private readonly _openerService;
    private readonly _menuService;
    private readonly _contextKeyService;
    private readonly _labelService;
    static readonly TitleMenu: MenuId;
    private _parentContainer;
    private _container;
    private _icon;
    private _message;
    private readonly _callOnDispose;
    private _severity;
    private _backgroundColor?;
    private readonly _onDidSelectRelatedInformation;
    private _heightInPixel;
    readonly onDidSelectRelatedInformation: Event<IRelatedInformation>;
    constructor(editor: ICodeEditor, _themeService: IThemeService, _openerService: IOpenerService, _menuService: IMenuService, instantiationService: IInstantiationService, _contextKeyService: IContextKeyService, _labelService: ILabelService);
    private _applyTheme;
    protected _applyStyles(): void;
    dispose(): void;
    focus(): void;
    protected _fillHead(container: HTMLElement): void;
    protected _fillTitleIcon(container: HTMLElement): void;
    protected _fillBody(container: HTMLElement): void;
    show(): void;
    showAtMarker(marker: IMarker, markerIdx: number, markerCount: number): void;
    updateMarker(marker: IMarker): void;
    showStale(): void;
    protected _doLayoutBody(heightInPixel: number, widthInPixel: number): void;
    _onWidth(widthInPixel: number): void;
    protected _relayout(): void;
    private computeRequiredHeight;
}
export declare const editorMarkerNavigationError: string;
export declare const editorMarkerNavigationErrorHeader: string;
export declare const editorMarkerNavigationWarning: string;
export declare const editorMarkerNavigationWarningHeader: string;
export declare const editorMarkerNavigationInfo: string;
export declare const editorMarkerNavigationInfoHeader: string;
export declare const editorMarkerNavigationBackground: string;
//# sourceMappingURL=gotoErrorWidget.d.ts.map