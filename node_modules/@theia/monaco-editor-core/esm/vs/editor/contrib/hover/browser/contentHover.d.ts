import { Disposable, DisposableStore } from '../../../../base/common/lifecycle';
import { ICodeEditor, IContentWidget, IContentWidgetPosition, IEditorMouseEvent } from '../../../browser/editorBrowser';
import { Position } from '../../../common/core/position';
import { Range } from '../../../common/core/range';
import { HoverStartMode } from './hoverOperation';
import { IEditorHoverColorPickerWidget } from './hoverTypes';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
export declare class ContentHoverController extends Disposable {
    private readonly _editor;
    private readonly _instantiationService;
    private readonly _keybindingService;
    private readonly _participants;
    private readonly _widget;
    private readonly _decorationsChangerListener;
    private readonly _computer;
    private readonly _hoverOperation;
    private _messages;
    private _messagesAreComplete;
    constructor(_editor: ICodeEditor, _instantiationService: IInstantiationService, _keybindingService: IKeybindingService);
    private _onModelDecorationsChanged;
    maybeShowAt(mouseEvent: IEditorMouseEvent): boolean;
    startShowingAtRange(range: Range, mode: HoverStartMode, focus: boolean): void;
    private _startShowingAt;
    hide(): void;
    isColorPickerVisible(): boolean;
    private _addLoadingMessage;
    private _withResult;
    private _renderMessages;
    private static readonly _DECORATION_OPTIONS;
}
declare class ContentHoverVisibleData {
    readonly colorPicker: IEditorHoverColorPickerWidget | null;
    readonly showAtPosition: Position;
    readonly showAtRange: Range;
    readonly preferAbove: boolean;
    readonly stoleFocus: boolean;
    readonly disposables: DisposableStore;
    constructor(colorPicker: IEditorHoverColorPickerWidget | null, showAtPosition: Position, showAtRange: Range, preferAbove: boolean, stoleFocus: boolean, disposables: DisposableStore);
}
export declare class ContentHoverWidget extends Disposable implements IContentWidget {
    private readonly _editor;
    private readonly _contextKeyService;
    static readonly ID = "editor.contrib.contentHoverWidget";
    readonly allowEditorOverflow = true;
    private readonly _hoverVisibleKey;
    private readonly _hover;
    private _visibleData;
    /**
     * Returns `null` if the hover is not visible.
     */
    get position(): Position | null;
    get isColorPickerVisible(): boolean;
    constructor(_editor: ICodeEditor, _contextKeyService: IContextKeyService);
    dispose(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IContentWidgetPosition | null;
    private _setVisibleData;
    private _layout;
    private _updateFont;
    showAt(node: DocumentFragment, visibleData: ContentHoverVisibleData): void;
    hide(): void;
    onContentsChanged(): void;
    clear(): void;
}
export {};
//# sourceMappingURL=contentHover.d.ts.map