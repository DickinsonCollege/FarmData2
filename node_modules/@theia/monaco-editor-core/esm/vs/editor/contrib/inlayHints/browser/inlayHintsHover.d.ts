import { AsyncIterableObject } from '../../../../base/common/async';
import { CancellationToken } from '../../../../base/common/cancellation';
import { ICodeEditor, IEditorMouseEvent } from '../../../browser/editorBrowser';
import { IModelDecoration } from '../../../common/model';
import { HoverAnchor, IEditorHoverParticipant } from '../../hover/browser/hoverTypes';
import { ILanguageService } from '../../../common/languages/language';
import { ITextModelService } from '../../../common/services/resolverService';
import { MarkdownHover, MarkdownHoverParticipant } from '../../hover/browser/markdownHoverParticipant';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration';
import { IOpenerService } from '../../../../platform/opener/common/opener';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
export declare class InlayHintsHover extends MarkdownHoverParticipant implements IEditorHoverParticipant<MarkdownHover> {
    private readonly _resolverService;
    readonly hoverOrdinal: number;
    constructor(editor: ICodeEditor, languageService: ILanguageService, openerService: IOpenerService, configurationService: IConfigurationService, _resolverService: ITextModelService, languageFeaturesService: ILanguageFeaturesService);
    suggestHoverAnchor(mouseEvent: IEditorMouseEvent): HoverAnchor | null;
    computeSync(): MarkdownHover[];
    computeAsync(anchor: HoverAnchor, _lineDecorations: IModelDecoration[], token: CancellationToken): AsyncIterableObject<MarkdownHover>;
    private _resolveInlayHintLabelPartHover;
}
//# sourceMappingURL=inlayHintsHover.d.ts.map