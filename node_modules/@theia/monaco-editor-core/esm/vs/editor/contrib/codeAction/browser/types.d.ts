import { Position } from '../../../common/core/position';
import { CodeAction, CodeActionTriggerType } from '../../../common/languages';
export declare class CodeActionKind {
    readonly value: string;
    private static readonly sep;
    static readonly None: CodeActionKind;
    static readonly Empty: CodeActionKind;
    static readonly QuickFix: CodeActionKind;
    static readonly Refactor: CodeActionKind;
    static readonly Source: CodeActionKind;
    static readonly SourceOrganizeImports: CodeActionKind;
    static readonly SourceFixAll: CodeActionKind;
    constructor(value: string);
    equals(other: CodeActionKind): boolean;
    contains(other: CodeActionKind): boolean;
    intersects(other: CodeActionKind): boolean;
    append(part: string): CodeActionKind;
}
export declare const enum CodeActionAutoApply {
    IfSingle = "ifSingle",
    First = "first",
    Never = "never"
}
export interface CodeActionFilter {
    readonly include?: CodeActionKind;
    readonly excludes?: readonly CodeActionKind[];
    readonly includeSourceActions?: boolean;
    readonly onlyIncludePreferredActions?: boolean;
}
export declare function mayIncludeActionsOfKind(filter: CodeActionFilter, providedKind: CodeActionKind): boolean;
export declare function filtersAction(filter: CodeActionFilter, action: CodeAction): boolean;
export interface CodeActionTrigger {
    readonly type: CodeActionTriggerType;
    readonly filter?: CodeActionFilter;
    readonly autoApply?: CodeActionAutoApply;
    readonly context?: {
        readonly notAvailableMessage: string;
        readonly position: Position;
    };
}
export declare class CodeActionCommandArgs {
    readonly kind: CodeActionKind;
    readonly apply: CodeActionAutoApply;
    readonly preferred: boolean;
    static fromUser(arg: any, defaults: {
        kind: CodeActionKind;
        apply: CodeActionAutoApply;
    }): CodeActionCommandArgs;
    private static getApplyFromUser;
    private static getKindFromUser;
    private static getPreferredUser;
    private constructor();
}
//# sourceMappingURL=types.d.ts.map