import { Disposable } from '../../../../base/common/lifecycle';
import './lightBulbWidget.css';
import { ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../../browser/editorBrowser';
import { IPosition } from '../../../common/core/position';
import { CodeActionSet } from './codeAction';
import type { CodeActionTrigger } from './types';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
export declare class LightBulbWidget extends Disposable implements IContentWidget {
    private readonly _editor;
    private readonly _quickFixActionId;
    private readonly _preferredFixActionId;
    private readonly _keybindingService;
    private static readonly _posPref;
    private readonly _domNode;
    private readonly _onClick;
    readonly onClick: import("../../../../base/common/event").Event<{
        x: number;
        y: number;
        actions: CodeActionSet;
        trigger: CodeActionTrigger;
    }>;
    private _state;
    constructor(_editor: ICodeEditor, _quickFixActionId: string, _preferredFixActionId: string, _keybindingService: IKeybindingService);
    dispose(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IContentWidgetPosition | null;
    update(actions: CodeActionSet, trigger: CodeActionTrigger, atPosition: IPosition): void;
    hide(): void;
    private get state();
    private set state(value);
    private _updateLightBulbTitleAndIcon;
    private set title(value);
}
//# sourceMappingURL=lightBulbWidget.d.ts.map