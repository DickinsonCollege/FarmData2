import { IAnchor } from '../../../../base/browser/ui/contextview/contextview';
import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { IPosition } from '../../../common/core/position';
import { CodeActionItem, CodeActionSet } from './codeAction';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { CodeActionShowOptions } from './codeActionMenu';
import { CodeActionsState } from './codeActionModel';
import { CodeActionTrigger } from './types';
export declare class CodeActionUi extends Disposable {
    #private;
    private readonly _editor;
    private readonly delegate;
    private readonly _codeActionWidget;
    private readonly _lightBulbWidget;
    private readonly _activeCodeActions;
    constructor(_editor: ICodeEditor, quickFixActionId: string, preferredFixActionId: string, delegate: {
        applyCodeAction: (action: CodeActionItem, regtriggerAfterApply: boolean) => Promise<void>;
    }, instantiationService: IInstantiationService);
    dispose(): void;
    update(newState: CodeActionsState.State): Promise<void>;
    private getInvalidActionThatWouldHaveBeenApplied;
    private tryGetValidActionToApply;
    showCodeActionList(trigger: CodeActionTrigger, actions: CodeActionSet, at: IAnchor | IPosition, options: CodeActionShowOptions): Promise<void>;
}
//# sourceMappingURL=codeActionUi.d.ts.map