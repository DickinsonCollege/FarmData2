import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Position } from '../../../common/core/position';
import { IEditorContribution } from '../../../common/editorCommon';
import { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { IColorData } from './color';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration';
export declare const ColorDecorationInjectedTextMarker: any;
export declare class ColorDetector extends Disposable implements IEditorContribution {
    private readonly _editor;
    private readonly _configurationService;
    private readonly _languageFeaturesService;
    static readonly ID: string;
    static readonly RECOMPUTE_TIME = 1000;
    private readonly _localToDispose;
    private _computePromise;
    private _timeoutTimer;
    private _debounceInformation;
    private _decorationsIds;
    private _colorDatas;
    private _colorDecoratorIds;
    private _isEnabled;
    private readonly _ruleFactory;
    constructor(_editor: ICodeEditor, _configurationService: IConfigurationService, _languageFeaturesService: ILanguageFeaturesService, languageFeatureDebounceService: ILanguageFeatureDebounceService);
    isEnabled(): boolean;
    static get(editor: ICodeEditor): ColorDetector | null;
    dispose(): void;
    private onModelChanged;
    private beginCompute;
    private stop;
    private updateDecorations;
    private _colorDecorationClassRefs;
    private updateColorDecorators;
    private removeAllDecorations;
    getColorData(position: Position): IColorData | null;
    isColorDecorationId(decorationId: string): boolean;
}
//# sourceMappingURL=colorDetector.d.ts.map