import { IGitExecutionOptions } from '../core/git';
import { ICheckoutProgress } from '../progress';
export declare type ProgressCallback = (progress: ICheckoutProgress) => void;
/**
 * Check out the given branch.
 *
 * @param repository - The repository in which the branch checkout should
 *                     take place
 *
 * @param name       - The branch name that should be checked out
 *
 * @param progressCallback - An optional function which will be invoked
 *                           with information about the current progress
 *                           of the checkout operation. When provided this
 *                           enables the '--progress' command line flag for
 *                           'git checkout'.
 */
export declare function checkoutBranch(repositoryPath: string, name: string, options?: IGitExecutionOptions, progressCallback?: ProgressCallback): Promise<void>;
/** Check out the paths at HEAD. */
export declare function checkoutPaths(repositoryPath: string, paths: string[], options?: IGitExecutionOptions): Promise<void>;
/**
 * Reverts the state of the file to the specified one.
 *
 * @param repositoryPath the local Git clone or its FS path.
 * @param paths the absolute file paths of the resources that have to be checked out.
 * @param treeish the commit SHA to check out. If not given, `HEAD` will be checked out.
 * @param merge when checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths.
 * @param force when checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored.
 */
export declare function checkout(repositoryPath: string, paths: string[], commitSHA: string, merge?: boolean, force?: boolean, options?: IGitExecutionOptions): Promise<void>;
