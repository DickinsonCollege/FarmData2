import { IGitExecutionOptions } from '../core/git';
import { WorkingDirectoryFileChange } from '../model/status';
/**
 * Add the given files to the index, stages the files.
 *
 * @param repository the repository path to the local Git clone.
 * @param filePaths the absolute FS path of the files to stage. If not specified, or an empty array, the it stages all changes.
 */
export declare function stage(repositoryPath: string, filePaths?: string | string[], options?: IGitExecutionOptions): Promise<void>;
/**
 * Removes the given files from the index. In other words, unstages the files.
 *
 * @param repository the repository path to the local Git clone.
 * @param filePaths the absolute FS path of the files to unstage. If not specified, or an empty array, is resets everything.
 * @param treeish the treeish to reset to. If not specified, then `HEAD` will be used.
 * @param where `index` to reset the index state, `working-tree` to reset the working tree but keep the index state. `all` to perform a hard reset. `all` be default.
 */
export declare function unstage(repositoryPath: string, filePaths?: string | string[], treeish?: string, where?: 'index' | 'working-tree' | 'all', options?: IGitExecutionOptions): Promise<void>;
/**
 * Returns with a list of all staged files from the repository.
 *
 * @param repository the repository or its FS path to get the staged files from.
 */
export declare function getStagedFiles(repositoryPath: string, options?: IGitExecutionOptions): Promise<WorkingDirectoryFileChange[]>;
